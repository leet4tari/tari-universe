---
name: "publish"

'on':
  push:
    branches:
      - "build-*"
  release:
    types: [published]
  workflow_dispatch:

concurrency:
  # https://docs.github.com/en/actions/examples/using-concurrency-expressions-and-a-test-matrix
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: ${{ !startsWith(github.ref, 'refs/tags/v') || github.ref != 'refs/heads/main' }}

permissions: {}

jobs:
  builds:
    name: Building ${{ matrix.platform }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
#          - platform: "ubuntu-22.04"
#            args: ""
#          - platform: "windows-2019"
#            args: ""
          - platform: "macos-latest"
            args: "--verbose --target universal-apple-darwin"

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: 'wasm32-unknown-unknown'

      - name: Rust setup (macOS/aarch64)
        if: startsWith(runner.os,'macOS')
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: aarch64-apple-darwin,x86_64-apple-darwin

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: >-
          sudo apt-get update;
          sudo apt-get install -y
          libwebkit2gtk-4.1-dev
          libappindicator3-dev
          librsvg2-dev patchelf
          apt-transport-https
          ca-certificates
          curl
          gpg
          openssl
          libssl-dev
          pkg-config
          libsqlite3-dev
          git
          cmake
          dh-autoreconf
          libc++-dev
          libc++abi-dev
          libprotobuf-dev
          protobuf-compiler
          libncurses5-dev
          libncursesw5-dev
          build-essential
          zip

      - name: Install Windows dependencies
        if: startsWith(runner.os,'Windows')
        run: |
          vcpkg.exe install sqlite3:x64-windows zlib:x64-windows
          # Bug in choco - need to install each package individually
          choco upgrade llvm -y
          # psutils is out of date
          # choco upgrade psutils -y
          choco upgrade openssl -y
          # Should already be installed
          # choco upgrade strawberryperl -y
          choco upgrade protoc -y

      - name: Install macOS dependencies
        if: startsWith(runner.os,'macOS')
        run: |
          # openssl, cmake, autoconf and zip already installed
          brew install coreutils automake protobuf
          # Build universal targets - bug in yarn?
          rm -f src-tauri/rust-toolchain.toml

      - name: install frontend dependencies
        run: yarn install

      - name: Build
        uses: tauri-apps/tauri-action@v0
        id: build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ENABLE_CODE_SIGNING: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        with:
          includeDebug: true
          includeRelease: false
          releaseBody: "Launcher for Tari DAN network."
          releaseDraft: true
          prerelease: true
          args: ${{ matrix.args }}

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: tari-universe_${{ steps.build.outputs.appVersion }}_${{ matrix.platform }}
          path: "${{ join(fromJSON(steps.build.outputs.artifactPaths), '\n') }}"
